box:
  id: golang:1.9

services:
  - rabbitmq:3.7.2

build:
  steps:
    - wercker/golint:
      exclude: vendor
    - setup-go-workspace:
        package-dir: github.com/seagullbird/headr-hugo-helper
    - script:
        name: env
        code: env
    - script:
        name: "Download hugo"
        code: |
          if [ -f "$WERCKER_CACHE_DIR/hugo" ]; then
            debug "hugo binary found in cache"
            cp $WERCKER_CACHE_DIR/hugo /usr/local/bin
          else
            debug "hugo binary not found in cache, will download"
            wget https://github.com/gohugoio/hugo/releases/download/v0.36.1/hugo_0.36.1_Linux-64bit.tar.gz &&
            tar -C /usr/local/bin -xzvf hugo_0.36.1_Linux-64bit.tar.gz &&
            cp $(which hugo) $WERCKER_CACHE_DIR
          fi
          hugo version
    - script:
        name: "Setup test environment"
        code: |
          if [ -f "$WERCKER_CACHE_DIR/environ.tar.gz" ]; then
            debug "environ.tar.gz found, unzipping..."
            tar -C / -xzf $WERCKER_CACHE_DIR/environ.tar.gz
          else
            debug "environ.tar.gz not found, creating..."
            mkdir -p /data/sites
            mkdir -p /data/themes
            mkdir -p /data/configs/test_theme
            git clone https://github.com/budparr/gohugo-theme-ananke.git /data/themes/test_theme --depth=1
            echo '{"baseurl":"/", "theme": "test_theme", "themesDir": "../../../themes"}' > /data/configs/test_theme/config.json
            tar -czvf $WERCKER_CACHE_DIR/environ.tar.gz /data
          fi
    - script:
        name: "Wait for RabbitMQ connection"
        code: |
          while ! $(python -c "import socket; soc=socket.socket(); soc.connect(('$RABBITMQ_PORT_5672_TCP_ADDR', $RABBITMQ_PORT_5672_TCP_PORT))"); \
          do sleep 3; done
    - script:
        name: go test
        code: |
          go test -v ./...
    - script:
        name: "go build"
        code: make build
    - script:
        name: "Copy output files"
        code: |
          cp build/hugo-helper $WERCKER_OUTPUT_DIR
          cp k8s/k8s-deploy.yaml.template $WERCKER_OUTPUT_DIR

push-image:
  steps:
    - script:
      name: "Move Kubernetes files"
      code: |
        mv k8s-deploy.yaml.template $WERCKER_OUTPUT_DIR
    - script:
      name: "Prepare hugo binary"
      code: |
        if [ -f "$WERCKER_CACHE_DIR/hugo" ]; then
          debug "hugo binary found, moving to /usr/bin/"
          mv $WERCKER_CACHE_DIR/hugo /usr/bin/hugo
        else
          debug "hugo binary not found, installing..."
          wget -q https://github.com/gohugoio/hugo/releases/download/v${HUGOVERSION}/hugo_${HUGOVERSION}_Linux-64bit.tar.gz
          mkdir hugo_binary
          tar -C hugo_binary/ -xf hugo_${HUGOVERSION}_Linux-64bit.tar.gz
          mv hugo_binary/hugo /usr/bin/hugo
          rm -rf hugo_${HUGOVERSION}_Linux-64bit.tar.gz hugo_binary
        fi
        hugo version
    - internal/docker-push:
        working-dir: $WERCKER_ROOT
        env: RABBITMQ_SERVER=${RABBITMQ_SERVER} RABBITMQ_USER=${RABBITMQ_USER} RABBITMQ_PASS=${RABBITMQ_PASS}
        cmd: ./hugo-helper
        tag: $WERCKER_GIT_COMMIT
        repository: $GCR_TAG
        registry: $GCR_HOST/v2
        username: _json_key
        password: $GCP_KEY_JSON

deploy-to-kubernetes:
  steps:
    - bash-template
    - riceo/kubectl:
        name: "Deploy to Kubernetes"
        server: $KUBERNETES_MASTER
        gcloud-key-json: $GCP_KEY_JSON
        gke-cluster-name: $GKE_CLUSTER_NAME
        gke-cluster-zone: $GKE_CLUSTER_ZONE
        gke-cluster-project: $GKE_CLUSTER_PROJECT
        command: apply -f k8s-deploy.yaml
